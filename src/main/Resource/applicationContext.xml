<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--====================================================以下是SpringMVC的一些配置=============================================================-->
    <bean id="handlerMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings">
            <props>
                <prop key="/test1">testHandler</prop>
            </props>
        </property>
    </bean>
    <bean id="testHandler" class="pers.huidong.springmvc.MyHandler"></bean>
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    <!--====================================================以下是Spring JDBCTemplate的一些配置=============================================================-->
<!--    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
<!--        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>-->
<!--        <property name="url" value="jdbc:mysql://localhost:3306/db_spring?serverTimezone=UTC"></property>-->
<!--        <property name="username" value="root"></property>-->
<!--        <property name="password" value="huidong"></property>-->
<!--    </bean>-->
<!--    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
<!--        <property name="dataSource" ref="dataSource"></property>-->
<!--    </bean>-->
    <!--====================================================以下是学习AspectJ方式aop的一些配置=============================================================-->
    <!--    注解方式===========-->
    <!--    <aop:aspectj-autoproxy/>-->
    <!--    <bean id="productDao" class="pers.huidong.spring_aspectJ.demo1.ProductDao"></bean>-->
    <!--    <bean id="myAspect" class="pers.huidong.spring_aspectJ.demo1.MyAspect"></bean>-->
    <!--    配置XML方式==========-->
    <!--    <bean id="customerDao" class="pers.huidong.spring_aspectJ.demo2.CustomerImpl"></bean>-->
    <!--    <bean id="myAspectXml" class="pers.huidong.spring_aspectJ.demo2.MyAspectXml"></bean>-->
    <!--    <aop:config>-->
    <!--&lt;!&ndash;        配置切入点&ndash;&gt;-->
    <!--        <aop:pointcut id="pointcut1" expression="execution(* pers.huidong.spring_aspectJ.demo2.CustomerDao.save(..))"/>-->
    <!--        <aop:pointcut id="pointcut2" expression="execution(* pers.huidong.spring_aspectJ.demo2.CustomerDao.delete(..))"/>-->
    <!--&lt;!&ndash;        配置aop的切面&ndash;&gt;-->
    <!--        <aop:aspect ref="myAspectXml">-->
    <!--            <aop:before method="before" pointcut-ref="pointcut1"></aop:before>-->
    <!--            <aop:after-returning method="afterReturning" pointcut-ref="pointcut2" returning="result"></aop:after-returning>-->
    <!--        </aop:aspect>-->
    <!--    </aop:config>-->
    <!--====================================================以下是学习传统方式aop的一些配置=================================================================-->
    <!--    普通切面==========================-->
    <!--        配置目标类-->
    <!--    <bean id="studentDao"  class="pers.huidong.spring_aop.demo3.StudentDaoImpl"></bean>-->
    <!--    前置通知类型-->
    <!--    <bean id="myBeforeAdvice"   class="pers.huidong.spring_aop.demo3.MyBeforeAdvice"></bean>-->
    <!--    Spring的Aop产生代理对象-->
    <!--    <bean id="studentDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->
    <!--        <property name="target" ref="studentDao"></property>-->
    <!--        <property name="proxyInterfaces" value="pers.huidong.spring_aop.demo3.StudentDao"></property>-->
    <!--        <property name="interceptorNames" value="myBeforeAdvice"></property>-->
    <!--    </bean>-->
    <!--    带切入点的切面=======================-->
    <!--    <bean id="customerDao" class="pers.huidong.spring_aop.demo4.CustomerDao"></bean>-->
    <!--    <bean id="myAroundAdvice" class="pers.huidong.spring_aop.demo4.MyAroundAdvice"></bean>-->
    <!--    <bean id="myAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">-->
    <!--        &lt;!&ndash;        <property name="pattern" value=".*save.*"></property>&ndash;&gt;-->
    <!--        <property name="pattern" value=".*save.*,.*delete.*"></property>-->
    <!--        <property name="advice" ref="myAroundAdvice"></property>-->
    <!--    </bean>-->
    <!--    <bean id="customerDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">-->
    <!--        <property name="target" ref="customerDao"></property>-->
    <!--        <property name="proxyTargetClass" value="true"></property>-->
    <!--        <property name="interceptorNames" value="myAdvisor"></property>-->
    <!--    </bean>-->
    <!--    传统aop的基于bean名称的自动代理==========-->
    <!--    <bean id="studentDao" class="pers.huidong.spring_aop.demo5.StudentDaoImpl"></bean>-->
    <!--    <bean id="customerDao" class="pers.huidong.spring_aop.demo5.CustomerDao"></bean>-->
    <!--    <bean id="myAroundAdvice" class="pers.huidong.spring_aop.demo5.MyAroundAdvice"></bean>-->
    <!--    <bean id="myBeforeAdvice" class="pers.huidong.spring_aop.demo5.MyBeforeAdvice"></bean>-->
    <!--    <bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">-->
    <!--        <property name="beanNames" value="*Dao"></property>-->
    <!--        <property name="interceptorNames" value="myBeforeAdvice"></property>-->
    <!--    </bean>-->
    <!--    传统aop的基于切面信息的自动代理==========-->
    <!--    <bean id="studentDao" class="pers.huidong.spring_aop.demo6.StudentDaoImpl"></bean>-->
    <!--    <bean id="customerDao" class="pers.huidong.spring_aop.demo6.CustomerDao"></bean>-->

    <!--    <bean id="myAroundAdvice" class="pers.huidong.spring_aop.demo6.MyAroundAdvice"></bean>-->
    <!--    <bean id="myBeforeAdvice" class="pers.huidong.spring_aop.demo6.MyBeforeAdvice"></bean>-->

    <!--    <bean id="myAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">-->
    <!--        <property name="pattern" value="pers\.huidong\.spring_aop\.demo6\.CustomerDao\.save"></property>-->
    <!--        <property name="advice" ref="myAroundAdvice"></property>-->
    <!--    </bean>-->

    <!--    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean>-->
    <!--====================================================以下是XML和注解方式混合使用=================================================================-->
    <!--   <context:component-scan base-package="pers.huidong.spring_ioc.demo8"/>-->
    <!-- 下面的表示只能用属性注入的注解   -->
    <!--    <context:annotation-config/>-->
    <!--    <bean id="categoryDao" class="pers.huidong.spring_ioc.demo8.CategoryDao"></bean>-->
    <!--    <bean id="productDao" class="pers.huidong.spring_ioc.demo8.ProductDao"></bean>-->
    <!--    <bean id="productService" class="pers.huidong.spring_ioc.demo8.ProductService"></bean>-->
    <!--====================================================以下是注解方式===========================================================================-->
    <!--    开启注解扫描-->
    <!--    <context:component-scan base-package="pers.huidong.spring_ioc.demo6"/>-->
    <!--    <context:component-scan base-package="pers.huidong.spring_ioc.demo7"/>-->
    <!--====================================================以下是配置XML方式=====================================================================-->
    <!--UserService的创建权交给了Spring-->
    <!--    <bean id="userService" class="pers.huidong.spring_ioc.demo1.UserServiceImpl">-->
    <!--        <property name="name" value="huidong"></property>-->
    <!--    </bean>-->

    <!--==================Bean实例化的三种方式：一般使用无参构造方式！========================-->
    <!--第一种：无参构造器的方式-->
    <!--    <bean id="bean1" class="pers.huidong.spring_ioc.demo2.Bean1"></bean>-->
    <!--第二种：静态工厂的方式-->
    <!--    <bean id="bean2" class="pers.huidong.spring_ioc.demo2.Bean2Factory" factory-method="createBean2"></bean>-->
    <!--第三种：实例工厂的方式-->
    <!--    <bean id="bean3Factor" class="pers.huidong.spring_ioc.demo2.Bean3Factory"></bean>-->
    <!--    <bean id="bean3" factory-bean="bean3Factor" factory-method="createBean3"></bean>-->

    <!--==================Bean的作用范围=================================================-->
    <!--第一种：默认单例的，多例则可设置scope="prototype"-->
    <!--    <bean id="person" class="pers.huidong.spring_ioc.demo3.Person" scope="prototype"></bean>-->

    <!--==================Bean的生命周期=================================================-->
    <!--简单的三种生命周期状态，实例化，初始化，销毁-->
    <!--    <bean id="man" class="pers.huidong.spring_ioc.demo3.Man" init-method="setUp" destroy-method="tearDown">-->
    <!--        <property name="name" value="huidong"></property>-->
    <!--    </bean>-->
    <!--生命周期的11种状态完整过程：加上上面的三种状态配置一起执行-->
    <!--    <bean class="pers.huidong.spring_ioc.demo3.MyBeanPostProcessor"></bean>-->
    <!--    <bean id="userDao" class="pers.huidong.spring_ioc.demo3.UserDaoImpl"></bean>-->
    <!--=======================属性注入方式===============================================-->
    <!--    构造方法的属性注入-->
    <!--    <bean id="user" class="pers.huidong.spring_ioc.demo4.User">-->
    <!--        <constructor-arg name="name" value="huidogn"></constructor-arg>-->
    <!--        <constructor-arg name="age" value="21"></constructor-arg>-->
    <!--    </bean>-->
    <!--    set方法的属性注入-->
    <!--    <bean id="person" class="pers.huidong.spring_ioc.demo4.Person">-->
    <!--        <property name="name" value="huiodng"/>-->
    <!--        <property name="age" value="21"/>-->
    <!--        <property name="cat" ref="cat"/>-->
    <!--    </bean>-->
    <!--    <bean id="cat" class="pers.huidong.spring_ioc.demo4.Cat">-->
    <!--        <property name="name" value="ketty"/>-->
    <!--    </bean>-->
    <!--    Bean的p名称空间方法的属性注入-->
    <!--    <bean id="person" class="pers.huidong.spring_ioc.demo4.Person" p:name="huidong" p:age="21" p:cat-ref="cat"/>-->
    <!--    <bean id="cat" class="pers.huidong.spring_ioc.demo4.Cat" p:name="ketty"/>-->
    <!--    Bean的Spel的属性注入-->
    <!--    <bean id="product" class="pers.huidong.spring_ioc.demo4.Product">-->
    <!--        <property name="name" value="#{'男装'}"/>-->
    <!--        <property name="price" value="#{productInfo.calculatePrice()}"/>-->
    <!--        <property name="category" value="#{category}"/>-->
    <!--    </bean>-->
    <!--    <bean id="category" class="pers.huidong.spring_ioc.demo4.Category">-->
    <!--        <property name="name" value="#{'服装'}"/>-->
    <!--    </bean>-->
    <!--    <bean id="productInfo" class="pers.huidong.spring_ioc.demo4.ProductInfo"></bean>-->
    <!--复杂类型属性注入-->
    <!--    <bean id="collectionBean" class="pers.huidong.spring_ioc.demo5.CollectionBean">-->
    <!--        <property name="arrs">-->
    <!--            &lt;!&ndash;   数组类型&ndash;&gt;-->
    <!--            <list>-->
    <!--                <value>aaa</value>-->
    <!--                <value>bbb</value>-->
    <!--                <value>ccc</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        &lt;!&ndash;   list集合类型&ndash;&gt;-->
    <!--        <property name="list">-->
    <!--            <list>-->
    <!--                <value>111</value>-->
    <!--                <value>222</value>-->
    <!--                <value>333</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        &lt;!&ndash;   set集合类型&ndash;&gt;-->
    <!--        <property name="set">-->
    <!--            <set>-->
    <!--                <value>111</value>-->
    <!--                <value>222</value>-->
    <!--                <value>333</value>-->
    <!--            </set>-->
    <!--        </property>-->
    <!--        &lt;!&ndash;   Map类型&ndash;&gt;-->
    <!--        <property name="map">-->
    <!--            <map>-->
    <!--                <entry key="aaa" value="111"></entry>-->
    <!--                <entry key="bbb" value="222"></entry>-->
    <!--                <entry key="ccc" value="333"></entry>-->
    <!--            </map>-->
    <!--        </property>-->
    <!--        &lt;!&ndash;   properties集合类型&ndash;&gt;-->
    <!--        <property name="properties">-->
    <!--            <props>-->
    <!--                <prop key="username">huidong</prop>-->
    <!--                <prop key="password">123</prop>-->
    <!--            </props>-->
    <!--        </property>-->
    <!--    </bean>-->
</beans>